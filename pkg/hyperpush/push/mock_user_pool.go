// Code generated by mockery v1.0.0. DO NOT EDIT.

package push

import mock "github.com/stretchr/testify/mock"

// MockUserPool is an autogenerated mock type for the UserPool type
type MockUserPool struct {
	mock.Mock
}

// Add provides a mock function with given fields: id, client
func (_m *MockUserPool) Add(id string, client *Client) {
	_m.Called(id, client)
}

// Del provides a mock function with given fields: id
func (_m *MockUserPool) Del(id string) {
	_m.Called(id)
}

// DelClient provides a mock function with given fields: id, clientID
func (_m *MockUserPool) DelClient(id string, clientID string) {
	_m.Called(id, clientID)
}

// Get provides a mock function with given fields: id
func (_m *MockUserPool) Get(id string) (map[string]*Client, bool) {
	ret := _m.Called(id)

	var r0 map[string]*Client
	if rf, ok := ret.Get(0).(func(string) map[string]*Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*Client)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Has provides a mock function with given fields: id
func (_m *MockUserPool) Has(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasClient provides a mock function with given fields: id, clientID
func (_m *MockUserPool) HasClient(id string, clientID string) bool {
	ret := _m.Called(id, clientID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Size provides a mock function with given fields:
func (_m *MockUserPool) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
